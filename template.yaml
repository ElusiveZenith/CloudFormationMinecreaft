AWSTemplateFormatVersion: 2010-09-09
Description: Template for Minecraft Server hosted with Fargate.
Parameters:
  Domain:
    Type: String
  AcceptEULA:
    Type: String
    AllowedValues:
      - 'TRUE'
  MinecraftVersion:
    Default: LATEST
    Type: String
    Description: "Latest or version number (e.g. 1.20.4)"
  LowercaseName:
    Type: String
  Memory:
    Default: 4G
    Type: String
    AllowedValues:
      - 4G
      - 6G
      - 8G
      - 10G
      - 12G
      - 14G
      - 16G
  Difficulty:
    Default: normal
    Type: String
    AllowedValues:
      - peaceful
      - easy
      - normal
      - hard
  UseWhiteList:
    Default: true
    Type: String
    AllowedValues:
      - true
      - false
  WorldSeed:
    Default: ""
    Type: String
  DiscordWebhookUrl:
    Type: String
  DiscordWebhookUsername:
    Default: "Minecraft Server"
    Type: String
  MaxPlayers:
    Default: 20
    Type: Number
  Hardcore:
    Default: false
    Type: String
    AllowedValues:
      - true
      - false
  VpcCIDR:
    Default: 10.30.0.0/16
    Type: String
  PublicSubnet1CIDR:
    Default: 10.30.1.0/24
    Type: String
  PublicSubnet2CIDR:
    Default: 10.30.2.0/24
    Type: String
  ServerManagementJobFile:
    Default: "ServerManagementJob.zip"
    Type: String
  ApiLambdaFile:
    Default: "ServerApi.zip"
    Type: String
  HostedZoneId:
    Type: String
  DiscordErrorAdminId:
    Description: '@id if user id, @&id if role'
    Type: String
  DiscordNotificationRoleId:
    Description: '@id if user id, @&id if role'
    Type: String

Resources:
  # ECS
  ServerCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-ServerCluster'
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-TaskDefinition'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 2048
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: !Sub "${Memory}B"
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref AWS::StackName
          Image: docker.io/itzg/minecraft-server:latest
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: EULA
              Value: !Ref AcceptEULA
            - Name: TYPE
              Value: PAPER
            - Name: MEMORY
              Value: !Ref Memory
            - Name: VERSION
              Value: !Ref MinecraftVersion
            - Name: DIFFICULTY
              Value: !Ref Difficulty
            - Name: ENABLE_WHITELIST
              Value: !Ref UseWhiteList
            - Name: SEED
              Value: !Ref WorldSeed
            - Name: HARDCORE
              Value: !Ref Hardcore
            - Name: MAX_PLAYERS
              Value: !Ref MaxPlayers
          MountPoints:
            - SourceVolume: efs-volume
              ContainerPath: /data
      Volumes:
        - Name: efs-volume
          EFSVolumeConfiguration:
            FilesystemId: !Ref EFSFileSystem
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref EFSAccessPoint
              IAM: ENABLED
   # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-ExecutionRole'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  TaskRole:
    # A role for the containers
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-TaskRole'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-TaskRole-Policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticfilesystem:ClientMount'
                  - 'elasticfilesystem:ClientWrite'
                  - 'elasticfilesystem:DescribeFileSystems'
                Resource:
                  - !GetAtt EFSFileSystem.Arn
              - Effect: Allow
                Action: 
                  - 'logs:DescribeLogGroups'
                Resource: "*"
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource:
                  - !GetAtt LogGroup.Arn
              - Effect: Allow
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource:
                  - '*'
  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-ContainerSecurityGroup'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: TCP
          ToPort: 25565
          FromPort: 25565
          CidrIp: 0.0.0.0/0
          Description: Minecraft Client Port
  ContainerSecurityGroupEFSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ContainerSecurityGroup
      SourceSecurityGroupId: !Ref ContainerSecurityGroup
      IpProtocol: TCP
      ToPort: 2049
      FromPort: 2049
      Description: EFS Port
  Service:
    Type: AWS::ECS::Service
    Properties: 
      ServiceName: !Ref AWS::StackName
      Cluster: !Ref ServerCluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 0
      LaunchType: FARGATE
      EnableExecuteCommand: true
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref ContainerSecurityGroup
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName

  # EFS
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
  EFSAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFSFileSystem
      PosixUser: 
        Gid: '1000'
        Uid: '1000'
      RootDirectory:
        Path: /minecraft
        CreationInfo:
            OwnerGid: '1000'
            OwnerUid: '1000'
            Permissions: '0755'
      AccessPointTags:
        - Key: Name
          Value: !Ref AWS::StackName
  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups: 
        - !Ref ContainerSecurityGroup
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PublicSubnet1
  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SecurityGroups: 
        - !Ref ContainerSecurityGroup
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PublicSubnet2

  # VPC and subnets
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ1)
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Subnet (AZ2)
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2


  # EFSSync
  EFSSyncS3:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub '${LowercaseName}-efs-sync-bucket-${AWS::AccountId}'
  SyncRole:
    # A role for the containers
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-SyncRole'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: datasync.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-SyncRole-Policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:DescribeFileSystems
                Resource:
                  - !GetAtt EFSFileSystem.Arn
              - Effect: Allow
                Action:
                  - s3:GetBucketLocation
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:GetObjectVersion
                  - s3:GetObjectVersionTagging
                Resource:
                  - !GetAtt EFSSyncS3.Arn
                  - !Sub '${EFSSyncS3.Arn}/*'
  SyncLocationS3:
    Type: AWS::DataSync::LocationS3
    Properties:
      S3BucketArn: !GetAtt EFSSyncS3.Arn
      S3Config:
        BucketAccessRoleArn: !GetAtt SyncRole.Arn
  SyncLocationEFS:
    Type: AWS::DataSync::LocationEFS
    Properties:
      AccessPointArn: !GetAtt EFSAccessPoint.Arn
      Ec2Config: 
        SecurityGroupArns: 
          - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${ContainerSecurityGroup}"
        SubnetArn: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PublicSubnet1}"
      EfsFilesystemArn: !GetAtt EFSFileSystem.Arn
      FileSystemAccessRoleArn: !GetAtt SyncRole.Arn
      InTransitEncryption: TLS1_2
  SyncFiles:
    Type: AWS::DataSync::Task
    Properties:
      Name: !Sub '${AWS::StackName}-Sync-Files-World'
      CloudWatchLogGroupArn: !GetAtt LogGroup.Arn
      DestinationLocationArn: !Ref SyncLocationEFS
      SourceLocationArn: !Ref SyncLocationS3
      Includes: 
        - FilterType: SIMPLE_PATTERN
          Value: /world/datapacks


  # Server Monitoring Job
  ServerMonitorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-Server-Monitor-Policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ssm:DescribeSessions
            - ec2:DescribeNetworkInterfaces
            - scheduler:GetSchedule
            - scheduler:UpdateSchedule
            Resource: '*'
          - Effect: Allow
            Action:
            - route53:ListResourceRecordSets
            - route53:ChangeResourceRecordSets
            Resource: !Sub 'arn:aws:route53:::hostedzone/${HostedZoneId}'
          - Effect: Allow
            Action:
            - ecs:ListTasks
            - ecs:DescribeTasks
            - ecs:ListTagsForResource
            - ecs:ExecuteCommand
            - ecs:TagResource
            - ecs:UntagResource
            - ecs:UpdateService 
            Resource:
            - !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${ServerCluster}/${AWS::StackName}'
            - !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${ServerCluster}/*'
            - !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/${ServerCluster}/*'
            - !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ServerCluster}'
            - !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/${ServerCluster}/*'
  ServerMonitorPassSelfPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${AWS::StackName}-Server-Monitor-Pass-Self-Policy'
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt ServerMonitorSchedulerRole.Arn
      Roles:
        - !Ref ServerMonitorLambdaRole
  ServerMonitorLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Minecraft server monitor
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: !Sub '${LowercaseName}-lambdas-${AWS::AccountId}'
        S3Key: !Ref ServerManagementJobFile
      Environment:
        Variables: 
          CLUSTER: !Ref ServerCluster
          SERVICE: !Ref Service
          CONTAINER: !Ref AWS::StackName
          DNS_NAME: !Ref Domain
          HOSTED_ZONE_ID: !Ref HostedZoneId
          SCHEDULER_NAME: !Sub '${AWS::StackName}-Server-Monitor-Schedule'
          DISCORD_WEBHOOK_URL: !Ref DiscordWebhookUrl
          DISCORD_WEBHOOK_USERNAME: !Ref DiscordWebhookUsername
          DISCORD_ERROR_ADMIN_ID: !Ref DiscordErrorAdminId
          DISCORD_NOTIFICATION_ROLE_ID: !Ref DiscordNotificationRoleId
      Role: !GetAtt ServerMonitorLambdaRole.Arn
      Runtime: python3.10
      MemorySize: 256
      Timeout: 600
  ServerMonitorSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - scheduler.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-Server-Monitor-Policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: !GetAtt ServerMonitorLambda.Arn
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  ServerMonitorScheduler:
    Type: AWS::Scheduler::Schedule
    Properties:
      Description: Scheduler for server's monitor
      FlexibleTimeWindow: 
        Mode: 'OFF'
      Name: !Sub '${AWS::StackName}-Server-Monitor-Schedule'
      ScheduleExpression: rate(3 minute)
      State: DISABLED
      Target: 
        Arn: !GetAtt ServerMonitorLambda.Arn
        RetryPolicy: 
          MaximumRetryAttempts: 0
        RoleArn: !GetAtt ServerMonitorSchedulerRole.Arn


  # API
  ApiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-API-Policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt ServerMonitorSchedulerRole.Arn
          - Effect: Allow
            Action:
            - scheduler:GetSchedule
            - scheduler:UpdateSchedule
            Resource: !GetAtt ServerMonitorScheduler.Arn
          - Effect: Allow
            Action:
            - ecs:UpdateService 
            Resource:
            - !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${ServerCluster}/${AWS::StackName}'
  ApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: API for Minecraft Server
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: !Sub '${LowercaseName}-lambdas-${AWS::AccountId}'
        S3Key: !Ref ApiLambdaFile
      Environment:
        Variables: 
          DISCORD_WEBHOOK_URL: !Ref DiscordWebhookUrl
          DISCORD_WEBHOOK_USERNAME: !Ref DiscordWebhookUsername
          DISCORD_ERROR_ADMIN_ID: !Ref DiscordErrorAdminId
          DISCORD_NOTIFICATION_ROLE_ID: !Ref DiscordNotificationRoleId
      Role: !GetAtt ApiLambdaRole.Arn
      Runtime: python3.10
      MemorySize: 256
      Timeout: 300
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      FunctionName: !GetAtt ApiLambda.Arn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*'
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-API'
  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: '{proxy+}'
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiLambda.Arn}/invocations'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGateway
  ApiInvokeManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${AWS::StackName}-Api-Access'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: IamListAccess
          Effect: Allow
          Action:
          - execute-api:Invoke
          Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*'
  ApiUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub '${AWS::StackName}-API-User'
      ManagedPolicyArns:
      - !Ref ApiInvokeManagedPolicy


  # AdminEC2
  # EC2:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: ami-04e5276ebb8451442
  #     InstanceType: t2.nano
  #     SubnetId: !Ref PublicSubnet1
  #     SecurityGroupIds:
  #       - !GetAtt EC2SecurityGroup.GroupId
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${AWS::StackName}-AdminEC2'
  #     UserData: 
  #       Fn::Base64: !Join
  #         - ''
  #         - - 'sudo yum install -y amazon-efs-utils'
  #           - 'sudo mkdir efs'
  #           - !Sub sudo mount -t efs ${EFSFileSystem} efs/
  # EC2SecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: !Sub '${AWS::StackName}-EC2-SSH'
  #     VpcId: !Ref VPC
  # EC2SecurityGroupEFSIngress:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref EC2SecurityGroup
  #     SourceSecurityGroupId: !Ref EC2SecurityGroup
  #     IpProtocol: TCP
  #     ToPort: 2049
  #     FromPort: 2049
  #     Description: EFS Port
